import { Animation, Vector3 } from '@babylonjs/core';
import React, { useEffect, useMemo, useRef } from 'react';
import { useBeforeRender } from 'react-babylonjs';
import { MAX_BOMBS } from '../../../utils/Constants';
import { addBomb, removeBomb, setBombRadius } from '../../gameLogic/StaticRefs';
import { useName } from '../../hooks/useName';

export const InvulnerabilityField = ({ active, radius, texture }) => {
    const transformNodeRef = useRef();
    const name = useName("invulnerabilityField")

    const startRadius = useMemo(
        () => Array.isArray(radius) ? radius[0] : radius,
        [radius]
    )
    const scaling = useMemo(
        () => {
            new Vector3(startRadius * 2, startRadius * 2, startRadius * 2)
        },
        [startRadius]
    )

    useEffect(() => {
        if (!active) return;
        addBomb(MAX_BOMBS - 1, transformNodeRef.current.getAbsolutePosition(), startRadius)

        if (Array.isArray(radius)) {
            Animation.CreateAndStartAnimation(
                name + "anim",
                transformNodeRef.current,
                "scaling",
                1,
                radius[2],
                transformNodeRef.current.scaling,
                new Vector3(radius[1] * 2, radius[1] * 2, radius[1] * 2),
                Animation.ANIMATIONLOOPMODE_CONSTANT
            )
        }
        else {
            transformNodeRef.current.scaling = new Vector3(startRadius * 2, startRadius * 2, startRadius * 2)
        }

        return () => {
            removeBomb(MAX_BOMBS - 1)
        }


    }, [active, name, radius, startRadius])

    useBeforeRender(() => {
        if (!transformNodeRef.current) return;
        setBombRadius(MAX_BOMBS - 1, transformNodeRef.current.scaling.x / 2)
    })

    return <transformNode name={name} ref={transformNodeRef} scaling={scaling}>
        {texture && active && <sphere name={name + "sphere"}>
            <standardMaterial
                backFaceCulling={false}
                useAlphaFromDiffuseTexture
                disableLighting={true}
                name={name + "mat"}
                diffuseTexture={texture}
                emissiveTexture={texture} />
        </sphere>}
    </transformNode>
}
